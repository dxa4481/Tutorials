{
  "name": "node-jsxml",
  "version": "0.4.0",
  "description": "an XML parser for javascript and node.js",
  "keywords": [
    "xml",
    "parser"
  ],
  "main": "./src/jsxml.js",
  "engines": {
    "node": ">=0.1.9"
  },
  "author": {
    "name": "colorhook",
    "email": "colorhook@gmail.com"
  },
  "maintainers": [
    {
      "name": "colorhook",
      "email": "colorhook@gmail.com",
      "url": "http://colorhook.com"
    }
  ],
  "contributors": [
    {
      "name": "TimSchlechter",
      "url": "http://github.com/TimSchlechter"
    }
  ],
  "bugs": {
    "url": "http://github.com/colorhook/jsxml/issues",
    "email": "colorhook@gmail.com"
  },
  "dependencies": {},
  "devDependencies": {
    "yui3": ""
  },
  "scripts": {
    "test": "node tests/jsxml-test.js"
  },
  "homepage": "https://github.com/colorhook/jsxml",
  "repository": {
    "type": "git",
    "url": "git://github.com/colorhook/jsxml.git"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "http://github.com/colorhook/jsxml/blob/master/LICENSE"
    }
  ],
  "readme": "jsxml\r\n==============\r\n\r\njsxml is an XML library for javascript (and node)\r\n\r\n单元测试\r\n------\r\n[![travis build status](https://api.travis-ci.org/colorhook/jsxml.png)](https://www.travis-ci.org/colorhook/jsxml)\r\n\r\n\r\nInstall by NPM\r\n--------------\r\n\r\n```shell\r\nnpm install node-jsxml\r\n```\r\n\r\nHow to use?\r\n------------\r\nAfter add this library to your project, there will be a global object named jsxml. \r\n\r\nin HTML file, import using &lt;script&gt; elements.\r\n\r\n```html\r\n<script src=\"jsxml.js\"></script>\r\n```\r\n\r\nin Node, import using require function.\r\n\r\n```javascript\r\nvar jsxml = require(\"node-jsxml\");\r\n```\r\n\r\nsupport AMD, CMD. Big thanks to [TimSchlechter](https://github.com/TimSchlechter).\r\n\r\n```javascript\r\nseajs.config({\r\n    alias: {\r\n        jsxml: '../src/jsxml.js'\r\n    }\r\n});\r\nseajs.use('jsxml', function(jsxml){\r\n    console.log(jsxml);\r\n});\r\n```\r\n\r\n```javascript\r\nvar Namespace = jsxml.Namespace,\r\n    QName = jsxml.QName,\r\n    XML = jsxml.XML,\r\n    XMLList = jsxml.XMLList;\r\n```\r\n\r\nHere you go:\r\n\r\n```javascript\r\nvar xml = new XML(\"<spring>\" + \r\n\t\t     \"<list id='data'>\" + \r\n\t\t       \"<element value='jsxml'/>\" +\r\n\t\t       \"<element value='is'/>\" +\r\n\t\t       \"<element value='an'/>\" +\r\n\t\t       \"<element value='xml'/>\" +\r\n\t\t       \"<element value='parser'/>\" +\r\n\t\t     \"</list>\" +\r\n                  \"</spring>\");\r\n\r\n//find child nodes\r\nvar child = xml.child('list');\r\n\r\n//print the xml string\r\nconsole.log(xml.toXMLString());\r\n\r\n//modify namespace\r\nxml.addNamespace(new Namespace(\"ns\", \"http://colorhook.com\"));\r\nxml.children().addNamespace(new Namespace(\"prefix\", \"uri\"));\r\nconsole.log(xml.toXMLString());\r\n\r\n//find descendants nodes\r\nvar descendants = xml.descendants('element');\r\n\r\n//get all children\r\nvar children = xml.children();\r\n//or\r\nvar children = xml.child('*');\r\n\r\n//get text node\r\nvar text = xml.text();\r\n\r\n//get element node\r\nvar elements = xml.elements();\r\n\r\n//get comment node\r\nvar comments = xml.comments();\r\n\r\n//get attribute\r\nvar attribute = xml.attribute(\"id\");\r\n\r\n//get all attributes\r\nvar attributes = xml.attributes();\r\n```\r\n\r\nAll methods above return an XML object or XMLList object, if you want to get the String type content, you should:\r\n\r\n```javascript\r\nvar xml = new XML(xmlContent);\r\n\r\nvar attrValue = xml.attribute('attrName').toString();\r\n//or\r\nvar attrValue = xml.attribute('attrName').getValue();\r\n\r\nvar childA = xml.child('a').toString();\r\n//or\r\nvar childA = xml.child('a').getValue();\r\n```\r\n\r\nIf you want to modify the value, you should call method setValue:\r\n\r\n```javascript\r\nvar xml = new XML(\"your xml string\");\r\n\r\nvar attr= xml.attribute('attrName');\r\nattr.setValue(\"newValue\");\r\n\r\nvar childA = xml.child('a');\r\nchildA.setValue(\"newValue\");\r\n```\r\n\r\nYou can regenerate the XML\r\n\r\n```javascript\r\nvar str = xml.toXMLString();\r\n```\r\n\r\nWhile dealing with a list of childs in XML tree, you should use XMLList API:\r\n\r\n```javascript\r\nvar list = xml.child(\"item\");\r\nlist.each(function(item, index){\r\n//item is an XML\r\n});\r\n```\r\n\r\nAdvanced topics\r\n----------------\r\n\r\nYou can also add, retrieve or remove namespaces:\r\n\r\n```javascript\r\nvar xml = new XML(\"your xml string\");\r\nvar ns = xml.namespace(\"prefix\");\r\n\r\nvar nsNew = new Namespace(\"prefix\", 'uri');\r\nxml.addNamespace(nsNew);\r\nxml.removeNamespace(nsNew);\r\n```\r\n\r\nBugs & Feedback\r\n----------------\r\n\r\nPlease feel free report bugs or feature requests.\r\nYou can send me private message on [github], or send me an email to: [colorhook@gmail.com]\r\n\r\nLicense\r\n-------\r\n\r\njsxml is free to use under MIT license. ",
  "readmeFilename": "README.md",
  "_id": "node-jsxml@0.4.0",
  "_from": "node-jsxml@"
}
